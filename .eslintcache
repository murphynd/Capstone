[{"/Users/nataliemurphy/git/Drum/drum-machine/src/index.js":"1","/Users/nataliemurphy/git/Drum/drum-machine/src/App.js":"2","/Users/nataliemurphy/git/Drum/drum-machine/src/reportWebVitals.js":"3","/Users/nataliemurphy/git/Drum/drum-machine/src/Components/Instrument.jsx":"4","/Users/nataliemurphy/git/Drum/drum-machine/src/Components/steps.jsx":"5","/Users/nataliemurphy/git/Drum/drum-machine/src/Components/step.jsx":"6","/Users/nataliemurphy/git/Drum/drum-machine/src/Components/TransportControl.jsx":"7","/Users/nataliemurphy/git/Drum/drum-machine/src/Components/pausePlay.jsx":"8","/Users/nataliemurphy/git/Drum/drum-machine/src/Components/InstrumentPannel.jsx":"9","/Users/nataliemurphy/git/Drum/drum-machine/src/Engines/Snare.js":"10","/Users/nataliemurphy/git/Drum/drum-machine/src/Engines/Clap.js":"11","/Users/nataliemurphy/git/Drum/drum-machine/src/Engines/HiHat.js":"12","/Users/nataliemurphy/git/Drum/drum-machine/src/Components/bpm.jsx":"13","/Users/nataliemurphy/git/Drum/drum-machine/src/Engines/Kick.js":"14","/Users/nataliemurphy/git/Drum/drum-machine/src/Engines/Bass.js":"15"},{"size":166,"mtime":1608670026405,"results":"16","hashOfConfig":"17"},{"size":267,"mtime":1608585265601,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1608573774898,"results":"19","hashOfConfig":"17"},{"size":2515,"mtime":1608681936507,"results":"20","hashOfConfig":"17"},{"size":523,"mtime":1608677784065,"results":"21","hashOfConfig":"17"},{"size":595,"mtime":1608680821974,"results":"22","hashOfConfig":"17"},{"size":3802,"mtime":1608682112834,"results":"23","hashOfConfig":"17"},{"size":529,"mtime":1608679398294,"results":"24","hashOfConfig":"17"},{"size":995,"mtime":1608603974401,"results":"25","hashOfConfig":"17"},{"size":1797,"mtime":1608604249658,"results":"26","hashOfConfig":"17"},{"size":2025,"mtime":1608612656382,"results":"27","hashOfConfig":"17"},{"size":1832,"mtime":1608612168517,"results":"28","hashOfConfig":"17"},{"size":451,"mtime":1608681429081,"results":"29","hashOfConfig":"17"},{"size":855,"mtime":1608659558284,"results":"30","hashOfConfig":"17"},{"size":790,"mtime":1608667337284,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"qmqhio",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/nataliemurphy/git/Drum/drum-machine/src/index.js",[],["69","70"],"/Users/nataliemurphy/git/Drum/drum-machine/src/App.js",[],"/Users/nataliemurphy/git/Drum/drum-machine/src/reportWebVitals.js",[],["71","72"],"/Users/nataliemurphy/git/Drum/drum-machine/src/Components/Instrument.jsx",["73","74"],"/Users/nataliemurphy/git/Drum/drum-machine/src/Components/steps.jsx",["75"],"import React from \"react\";\nimport { Step } from \"./step\";\nimport \"./step.css\";\n\nexport class Steps extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div style={{ flex: 1, flexDirection: \"row\" }}>\n        {this.props.steps.map((step, idx) => {\n          return (\n            <Step\n              on={step}\n              onClick={this.props.handleStepChange}\n              key={idx}\n              id={idx}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n","/Users/nataliemurphy/git/Drum/drum-machine/src/Components/step.jsx",[],"/Users/nataliemurphy/git/Drum/drum-machine/src/Components/TransportControl.jsx",[],"/Users/nataliemurphy/git/Drum/drum-machine/src/Components/pausePlay.jsx",[],"/Users/nataliemurphy/git/Drum/drum-machine/src/Components/InstrumentPannel.jsx",["76"],"import React from \"react\";\n\nexport class InstrumentPannel extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    console.log(\"the selected is\", this.props.selectedInstrument);\n    const childrenWithProps = React.Children.map(\n      this.props.children,\n      (child) => {\n        if (\n          typeof child === \"object\" &&\n          child !== null &&\n          child.hasOwnProperty(\"key\")\n        ) {\n          if (child.key === this.props.selectedInstrument) {\n            return React.cloneElement(child, {\n              steps: this.props.steps,\n              selected: true,\n            });\n          } else {\n            return React.cloneElement(child, { steps: null, selected: false });\n          }\n        }\n        return child;\n      }\n    );\n\n    return (\n      <div\n        style={{\n          flex: 1,\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        {childrenWithProps}\n      </div>\n    );\n  }\n}\n","/Users/nataliemurphy/git/Drum/drum-machine/src/Engines/Snare.js",["77"],"export class Snare {\n  constructor(ctx) {\n    this.ctx = ctx;\n    this.tone = 100;\n    this.decay = 0.2;\n    this.volume = 1;\n  }\n\n  setup() {\n    this.noise = this.ctx.createBufferSource();\n    this.noise.buffer = this.noiseBuffer();\n\n    let noiseFilter = this.ctx.createBiquadFilter();\n    noiseFilter.type = \"highpass\";\n    noiseFilter.frequency.value = 1000;\n    this.noise.connect(noiseFilter);\n\n    this.noiseEnvelope = this.ctx.createGain();\n    noiseFilter.connect(this.noiseEnvelope);\n\n    this.noiseEnvelope.connect(this.ctx.destination);\n\n    this.osc = this.ctx.createOscillator();\n    this.osc.type = \"triangle\";\n\n    this.oscEnvelope = this.ctx.createGain();\n    this.osc.connect(this.oscEnvelope);\n    this.oscEnvelope.connect(this.ctx.destination);\n  }\n  noiseBuffer() {\n    var bufferSize = this.ctx.sampleRate;\n    var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n    var output = buffer.getChannelData(0);\n\n    for (var i = 0; i < bufferSize; i++) {\n      output[i] = Math.random() * 2 - 1;\n    }\n\n    return buffer;\n  }\n\n  trigger(time) {\n    if (this.volume == 0) {\n      return;\n    }\n    this.setup();\n    this.noiseEnvelope.gain.setValueAtTime(this.volume, time);\n    this.noiseEnvelope.gain.exponentialRampToValueAtTime(\n      0.01,\n      time + this.decay\n    );\n    this.noise.start(time);\n\n    this.osc.frequency.setValueAtTime(this.tone, time);\n    this.oscEnvelope.gain.setValueAtTime(0.7 * this.volume, time);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(\n      0.01 * this.volume,\n      time + this.decay / 2\n    );\n    this.osc.start(time);\n\n    this.osc.stop(time + this.decay);\n    this.noise.stop(time + this.decay);\n  }\n  setTone = (tone) => {\n    this.tone = tone;\n  };\n  setVolume = (vol) => {\n    this.volume = vol;\n  };\n}\n","/Users/nataliemurphy/git/Drum/drum-machine/src/Engines/Clap.js",["78"],"export class Clap {\n  constructor(ctx) {\n    this.tone = 130;\n    this.volume = 1;\n    this.decay = 0.3;\n    this.pulseWidth = 0.025;\n    this.ctx = ctx;\n    this.fxAmount = 0;\n  }\n\n  noiseBuffer() {\n    var bufferSize = this.ctx.sampleRate;\n    var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n    var output = buffer.getChannelData(0);\n\n    for (var i = 0; i < bufferSize; i++) {\n      output[i] = Math.random() * 2 - 1;\n    }\n    return buffer;\n  }\n\n  setup() {\n    this.noise = this.ctx.createBufferSource();\n    this.noise.buffer = this.noiseBuffer();\n    this.filter = this.ctx.createBiquadFilter();\n    this.filter.type = \"bandpass\";\n    this.filter.frequency.value = this.tone * 2;\n    this.envelope = this.ctx.createGain();\n    this.feedback = this.ctx.createGain();\n    this.echo = this.ctx.createDelay();\n    // this.echo.delayTime.value = Time(\"6n\").toSeconds();\n    this.feedback.gain.value = (0.99 * this.fxAmount) / 100;\n\n    this.noise.connect(this.filter);\n    this.filter.connect(this.envelope);\n\n    this.envelope.connect(this.echo);\n    this.echo.connect(this.feedback);\n    this.feedback.connect(this.echo);\n    this.feedback.connect(this.ctx.destination);\n    this.envelope.connect(this.ctx.destination);\n  }\n\n  trigger = (time) => {\n    if (this.volume == 0) {\n      return;\n    }\n    this.setup();\n    this.envelope.gain.setValueAtTime(this.volume, time);\n    this.envelope.gain.exponentialRampToValueAtTime(\n      0.1,\n      time + this.pulseWidth\n    );\n\n    this.envelope.gain.setValueAtTime(this.volume, time + this.pulseWidth);\n    this.envelope.gain.exponentialRampToValueAtTime(\n      0.1,\n      time + 2 * this.pulseWidth\n    );\n\n    this.envelope.gain.setValueAtTime(this.volume, time + 2 * this.pulseWidth);\n    this.envelope.gain.exponentialRampToValueAtTime(0.001, time + this.decay);\n\n    this.noise.start(time);\n    this.noise.stop(time + this.decay);\n  };\n\n  setTone = (tone) => {\n    this.tone = tone;\n  };\n  setVolume = (vol) => {\n    this.volume = vol;\n  };\n}\n","/Users/nataliemurphy/git/Drum/drum-machine/src/Engines/HiHat.js",["79","80"],"export class HiHat {\n  constructor(ctx) {\n    this.ctx = ctx;\n    this.ratios = [1, 1.342, 1.2312, 1.6532, 1.9523, 2.1523];\n    this.tone = 130.81;\n    this.decay = 0.5;\n    this.volume = 1;\n    this.fxAmount = 0;\n  }\n\n  setup() {\n    const k = this.fxAmount / 100;\n    this.oscEnvelope = this.ctx.createGain();\n    this.bndPass = this.ctx.createBiquadFilter();\n    this.bndPass.type = \"bandpass\";\n    this.bndPass.frequency.value = 20000;\n    this.bndPass.Q.value = 0.2;\n    this.hipass = this.ctx.createBiquadFilter();\n    this.hipass.type = \"highpass\";\n    this.hipass.frequency.value = 5000;\n    this.panner = this.ctx.createStereoPanner();\n\n    this.bndPass.connect(this.hipass);\n    this.hipass.connect(this.oscEnvelope);\n    this.oscEnvelope.connect(this.panner);\n    this.panner.connect(this.ctx.destination);\n  }\n\n  trigger(time) {\n    if (this.volume == 0) {\n      return;\n    }\n    this.setup();\n    this.panner.pan.value = (Math.cos(time * 4) * this.fxAmount) / 100;\n    this.ratios.forEach((ratio) => {\n      var osc = this.ctx.createOscillator();\n      osc.type = \"square\";\n      osc.frequency.value = this.tone * ratio;\n      osc.connect(this.bndPass);\n      osc.start(time);\n      osc.stop(time + this.decay);\n    });\n    this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(\n      1 * this.volume,\n      time + 0.067 * this.decay\n    );\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(\n      0.3 * this.volume,\n      time + 0.1 * this.decay\n    );\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(\n      0.00001 * this.volume,\n      time + this.decay\n    );\n  }\n\n  setTone = (tone) => {\n    this.tone = tone;\n  };\n  setVolume = (vol) => {\n    this.volume = vol;\n  };\n\n  setFXAmount = (amount) => {\n    this.fxAmount = amount;\n  };\n}\n","/Users/nataliemurphy/git/Drum/drum-machine/src/Components/bpm.jsx",[],"/Users/nataliemurphy/git/Drum/drum-machine/src/Engines/Kick.js",[],"/Users/nataliemurphy/git/Drum/drum-machine/src/Engines/Bass.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"81","replacedBy":"85"},{"ruleId":"83","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":8,"column":13,"nodeType":"89","messageId":"90","endLine":8,"endColumn":17},{"ruleId":"91","severity":1,"message":"92","line":35,"column":5,"nodeType":"93","messageId":"94","endLine":51,"endColumn":6},{"ruleId":"95","severity":1,"message":"96","line":6,"column":3,"nodeType":"97","messageId":"98","endLine":8,"endColumn":4},{"ruleId":"95","severity":1,"message":"96","line":4,"column":3,"nodeType":"97","messageId":"98","endLine":6,"endColumn":4},{"ruleId":"99","severity":1,"message":"100","line":43,"column":21,"nodeType":"101","messageId":"102","endLine":43,"endColumn":23},{"ruleId":"99","severity":1,"message":"100","line":45,"column":21,"nodeType":"101","messageId":"102","endLine":45,"endColumn":23},{"ruleId":"87","severity":1,"message":"103","line":12,"column":11,"nodeType":"89","messageId":"90","endLine":12,"endColumn":12},{"ruleId":"99","severity":1,"message":"100","line":30,"column":21,"nodeType":"101","messageId":"102","endLine":30,"endColumn":23},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],["104"],["105"],"no-unused-vars","'Tone' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'k' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]